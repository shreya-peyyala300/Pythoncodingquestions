from collections import deque
class MyStack(object):
    def __init__(self):
        self.q=deque()
    def push(self, x):
        self.q.append(x)      
    def pop(self):
        for i in range(len(self.q)-1):
            self.push(self.q.popleft())
        return self.q.popleft()      
    def top(self):
        return self.q[-1]
    def empty(self):
        return len(self.q)==0


operations = ["MyStack", "push", "push", "top", "pop", "empty"]
args = [[], [1], [2], [], [], []]

result = []

stack = None
for op, arg in zip(operations, args):
    if op == "MyStack":
        # Initialize the stack (constructor)
        stack = MyStack()
        result.append(None)  # Constructor doesn't return anything
    elif op == "push":
        # Perform push operation
        stack.push(arg[0])
        result.append(None)  # Push doesn't return anything
    elif op == "top":
        # Perform top operation
        result.append(stack.top())  # Append the top value
    elif op == "pop":
        # Perform pop operation
        result.append(stack.pop())  # Append the popped value
    elif op == "empty":
        # Perform empty operation
        result.append(stack.empty())  # Append the result of empty check

# Output the results of the operations
print(result)
